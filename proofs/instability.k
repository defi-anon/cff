require "proof.k"

module INSTABILITY

imports UNISWAPV2

rule <k>

On UniswapV2 697323163401596485410334513241460920685086001293 swaps for 1097077688018008265106216665536940668749033598146 by providing 1300000000000000000000 1096451400262405796991039590211805051831004063880 and 0 1097077688018008265106216665536940668749033598146 with change 0 fee 1767957155464 ;
     On Sushiswap Miner swaps for 1097077688018008265106216665536940668749033598146 by providing Alpha:Int 1096451400262405796991039590211805051831004063880 and 0 1097077688018008265106216665536940668749033598146 with change 0 fee 0 ;
     On UniswapV2 Miner swaps for Alpha 1096451400262405796991039590211805051831004063880 by providing 1097077688018008265106216665536940668749033598146 fee 0 ;

     => .K
     </k>
     <S> (Sushiswap in 1096451400262405796991039590211805051831004063880) |-> 107495485843438764484770 (Sushiswap in 1097077688018008265106216665536940668749033598146) |-> 49835502094518088853633 (UniswapV2 in 1096451400262405796991039590211805051831004063880) |-> 5945498629669852264883 (UniswapV2 in 1097077688018008265106216665536940668749033598146) |-> 2615599823603823616442 => ?S:Map </S>
     <B> .List => ?_ </B>
     requires (Alpha >Int 0) andBool (Alpha <Int 10000000000000000000000) 
//andBool (Alpha <Int X) andBool (Alpha <Int Y) andBool (X >Int 0) andBool (Y >Int 0) //10**22
     ensures ({?S[Miner in 1096451400262405796991039590211805051831004063880]}:>Int <=Int 0  ) andBool ({?S[Miner in 1097077688018008265106216665536940668749033598146]}:>Int <=Int 0  )

endmodule
